var path = require('path');
var webpack = require('webpack');
var HtmlWebpackPlugin = require('html-webpack-plugin');
var ExtractTextPlugin = require("extract-text-webpack-plugin");

module.exports = function(options) {
  var entry, jsLoaders, plugins, cssLoaders;

  // Define configuration if production
  if (options.prod) {
    // Define entry file
    entry = [
      path.resolve(__dirname, 'public/js/app.js') // Start with js/app.js
    ];
    cssLoaders = ExtractTextPlugin.extract('style-loader', 'css-loader!');
    // Define plugins we want to use
    plugins = [
      new webpack.optimize.UglifyJsPlugin({ // Optimize the JavaScript
        compress: {
          warnings: false // Do not show warnings in the console
        }
      }),
      new HtmlWebpackPlugin({
        template: 'index.html', // Move the index.html file
        minify: { // Minifying it while it is parsed
          removeComments: true,
          collapseWhitespace: true,
          removeRedundantAttributes: true,
          useShortDoctype: true,
          removeEmptyAttributes: true,
          removeStyleLinkTypeAttributes: true,
          keepClosingSlash: true,
          minifyJS: true,
          minifyCSS: true,
          minifyURLs: true
        },
        inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
      }),
      new ExtractTextPlugin("public/css/main.css"),
      new webpack.DefinePlugin({
        "process.env": {
          NODE_ENV: JSON.stringify("production")
        }
      })
    ];

  // Define development configuration
  } else {
    // Entry
    entry = [
      "webpack-dev-server/client?http://localhost:3000", // Needed for hot reloading
      "webpack/hot/only-dev-server",
      path.resolve(__dirname, 'public/js/app.js') // Start with js/app.js
    ];
    cssLoaders = 'style-loader!css-loader!';
    // Only plugin is the hot module replacement plugin
    plugins = [
      new webpack.HotModuleReplacementPlugin(), // Make hot loading work
      new HtmlWebpackPlugin({
        template: 'index.html', // Move the index.html file
        inject: true // inject all files that are generated by webpack, e.g. bundle.js, main.css with the correct HTML tags
      })
    ]
  }

  return {
    entry: entry,
    output: { // Compile into js/build.js
      path: path.resolve(__dirname, 'build'),
      filename: "js/bundle.js"
    },
    module: {
      preLoaders: [{
        test: /\.js$/, // Transform all .js files
        loaders: ['eslint-loader'], // using these loaders
        exclude: path.join(__dirname, '/node_modules/') // except for the node_modules folder
      }
    ],
      loaders: [{
          test: /\.js$/, // Transform all .js files
          loader: 'babel', // using these loaders
          exclude: path.join(__dirname, '/node_modules/') // except for the node_modules folder
        }, {
          test:   /\.css$/, // Transform all .css files
          loader: cssLoaders
        }, {
          test: /\.jpe?g$|\.gif$|\.png$/i,
          loader: "url-loader?limit=10000"
        }
      ]
    },
    plugins: plugins,
    target: "web", // Make web variables accessible to webpack, e.g. window
    stats: false, // Don't show stats in the console
    progress: true
  }
}
